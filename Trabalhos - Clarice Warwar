TRABALHO 1 - CONCEITOS INICIAIS

O que é um arquivo?
R: No contexto da programação, arquivo é um conjunto de dados armazenados e que estão de alguma forma relacionados, seguindo um formato (texto, imagem e outros) digital, 
em um dispositivo externo de armazenamento.

O que é um arquivo de texto?
R: Se trata de um arquivo que contém texto estruturado em linhas e armazenam informações.
Esses podem estar no formato “.txt”, por exemplo, sendo uma extensão de arquivo para os
que não possuem formatação. Eles são lidos e interpretados de forma fácil por qualquer um,
sendo considerados universais.

O que é uma variável?
R: É uma forma de armazenar valores manipulados pelos programas enquanto operam.
Alguns exemplos, podemos citar a “double”, que permite armazenamento de números reais, “char”, para armazenar um único caractere, entre outras.

O que é um servidor?
R: Computadores/sistemas computacionais que atendem dispositivos através de redes, executando aplicações - prestando serviços, armazenando dados, etc.

TRABALHO 2 - COMPUTADORES E ARQUIVOS

A relação entre a LGPD e os Data Centers no Brasil:
R: LGPD veio para garantir a segurança das informações dos dados pessoais que, hoje expostos, correm risco. Os Data Centers são instalações 
que hospedam recursos da infraestrutura de TI. A LGPD trata dessa segurança atribuindo responsabilidade às empresas que controlam
e processam dados processuais. Caso um Data Center brasileiro processe dados pessoais que serão transferidos para fora do 
país, é necessário observar as regras e regulamentações da LGPD. Os Data Centers têm um papel fundamental na conformidade com
a LGPD, uma vez que oferecem a infraestrutura e os serviços necessários para atender aos princípios e requisitos estipulados pela legislação de proteção de dados. 

Dados proprietários e abertos:
R: Dados proprietários referem-se a informações que são de propriedade exclusiva de uma empresa ou organização. Dados abertos
referem-se a informações que estão disponíveis para o público em geral sem restrições significativas.

-Proprietários:
Excel (XLSX): Um formato de planilha da Microsoft.
Adobe Illustrator (AI): Usado para gráficos vetoriais.

-Abertos:
CSV (Comma-Separated Values): Um formato simples e amplamente utilizado para dados tabulares.
JSON (JavaScript Object Notation): Formato de intercâmbio de dados legível por humanos e fácil de entender.

-Implicações relacionadas a dados públicos:
Proprietários: O custo associado à aquisição e atualização de software específico pode ser uma consideração para organizações ou usuários individuais.
Abertos: Muitos formatos abertos são gratuitos, reduzindo os custos associados à adoção e uso.

Proprietários: A falta de padronização pode levar a variações nos formatos entre diferentes versões de software.
Abertos: Muitos formatos abertos são padronizados por organizações reconhecidas, promovendo consistência e interoperabilidade.

TRABALHO 3

Diferenças entre 3 linguagens de programação:
R: PHP é uma linguagem de script popular do lado do servidor, usada principalmente para o desenvolvimento web, 
para criar páginas dinâmicas.. Python já é uma linguagem mais utilizada para programadores, sendo uma 
de mais fácil aprendizagem e mais utilizada nos últimos anos, utilizada comumente 
para automação, análise de dados, etc. Por último, R é a principal para análise de 
dados, sendo a mais famosa entre os cientistas de dados/estatísticos. Mais complexa,
está em grande ascensão, sendo uma vantagem saber utilizá-la. 

Códigos:
PHP 
<?php
echo "Olá, Mundo! ";
?>
Python print("Olá, Mundo! ")
R cat("Olá, Mundo! \n")

TRABALHO 4

Estrutura de Repetição (Loop - for): 
for i in range(1, 6):
    print(i)

Estrutura de Tomada de Decisão (if-else):
numero = 25

if numero > 0:
    print("O número é positivo.")
elif numero < 0:
    print("O número é negativo.")
else:
    print("O número é zero.")

TRABALHO 5

1-
def bubble_sort(arr):
    n = len(arr)
    # Percorre todos os elementos do array
    for i in range(n):
        # Últimos i elementos já estão ordenados, então não precisamos
        # comparar eles novamente
        for j in range(0, n-i-1):
            # Troca se o elemento atual for maior que o próximo
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

arr = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(arr)
print("Array ordenado:")
for i in range(len(arr)):
    print("%d" % arr[i]),

2- 
def extrair_vogais(palavra):
    vogais = ''
    for letra in palavra:
        if letra.lower() in 'aeiou':
            vogais += letra
    return vogais

palavra = 'Hello World'
vogais = extrair_vogais(palavra)
print("Vogais na palavra '{}': {}".format(palavra, vogais))

TRABALHO 6 

número = 10
nome = "Clarice"
booleano = True
a = 10
b = 5
soma = a + b
subtração = a - b
multiplicação = a * b
divisão = a / b
c = 5
d = 6
e = 7
f = 8
frase = "eu sou linda"
palavra = "louca"
media = (c + d + e + f) / 4
print("A média é", media)
      
quadrado = c * c
print ("O quadrado do número 5 é", quadrado)

dobro = c * 2
print ("O dobro do número 5 é", dobro)

frase = "eu sou linda"
quantidade_letras = len (frase)
print ("A frase tem", quantidade_letras, "letras.")

quantidade_espacos = frase.count (" ")
print ("a quantidade de espaços na frase é", quantidade_espacos)

if c > d:
    print ("o c é maior que d.")
else:
    print ("o d é maior que a.")

maior_numero = max (c,d,e,f)
print ("o maior número é:", maior_numero)

TRABALHO 8

Manipulação de Arquivos
def questao1():
    nome = input("Por favor, digite seu nome: ")

    # Abre o arquivo no modo de escrita ('w'), isso irá criar o arquivo se não existir ou sobrescrevê-lo se existir
    with open("nome.txt", "w") as arquivo:
        arquivo.write(nome)

    print("Nome salvo com sucesso no arquivo 'nome.txt'.")

# Exemplo de uso da função
questao1()

def questao2():
    nome_arquivo = input("Digite o nome do arquivo de texto: ")

    # Abre o arquivo no modo de leitura ('r')
    with open(nome_arquivo, "r") as arquivo:
        conteudo = arquivo.read()

    print("Conteúdo do arquivo:")
    print(conteudo)

# Exemplo de uso da função
questao2()

def questao3():
    # Abre o arquivo de origem no modo de leitura ('r')
    with open(origem, "r") as arquivo_origem:
        conteudo = arquivo_origem.read()

    # Abre ou cria o arquivo de destino no modo de escrita ('w')
    with open(destino, "w") as arquivo_destino:
        arquivo_destino.write(conteudo)

    print(f"Conteúdo do arquivo '{origem}' copiado com sucesso para o arquivo '{destino}'.")

# Exemplo de uso da função
questao3("exemplo.txt", "novo_arquivo.txt")

def questao4():
    try:
        # Solicita um número ao usuário
        numero = int(input("Digite um número para encontrar o nome correspondente: "))

        # Abre o arquivo de exemplo no modo de leitura ('r')
        with open("exemplo.txt", "r") as arquivo:
            # Lê todas as linhas do arquivo
            linhas = arquivo.readlines()

            # Verifica se o número está dentro do intervalo das linhas do arquivo
            if 0 < numero <= len(linhas):
                # Imprime o nome correspondente ao número
                print(linhas[numero - 1].strip())
            else:
                print("Número fora do intervalo válido.")
    except ValueError:
        print("Erro: Por favor, digite um número válido.")
    except FileNotFoundError:
        print("Erro: O arquivo de exemplo não foi encontrado.")

# Exemplo de uso da função
questao4()

TRABALHO 9

def bombons(dinheiro, preco):
    n_bombons = dinheiro % preco
    return n_bombons, troco

def a_mais(dinheiro,preco):
    troco = bombons(dinheiro, preco)

def numeros_pares(numero):
    return list (filter(lambda x: x % 2 == 0, range(1, numero + 1)))

# Exemplo de uso
numero = 10
print (numeros_pares(numero)) # Saída: [2, 4, 6, 8, 10]

def bombons (dinheiro, preco):
    n_bombons = dinheiro // preco
    troco = dinheiro % preco
    return n_bombons, troco

def a_mais(dinheiro,preco):
    qtd, troco = bombons(dinheiro, preco)
    return preco - troco

def lista(n):
    return list(range(2, n+1, 2))
